
import random
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from multiprocessing import Process, Queue
import psycopg2

# Database configuration
db_config = {
    'host': 'localhost',
    'port': '5432',
    'database': 'zombie_game_db',
    'user': 'postgres',
    'password': 'Rhysand#1'
}

# Define agent states
class AgentState:
    ALIVE = "Alive"
    INFECTED = "Infected"
    DEAD = "Dead"


# Define agent types
class AgentType:
    HUMAN = "Human"
    ZOMBIE = "Zombie"
    DOCTOR = "Doctor"
    DEAD = "Dead"


# Define the classes
class Agent:
    id_counter = 0

    def __init__(self, agent_type, energy_range=(0, 100)):
        self.id = Agent.id_counter
        Agent.id_counter += 1
        self.agent_type = agent_type
        self.energy = random.randint(energy_range[0], energy_range[1])
        self.state = AgentState.ALIVE  # Start as ALIVE by default
        self.neighbors = []

    def __str__(self):
        return f"{self.agent_type} (ID: {self.id}, Energy: {self.energy}, State: {self.state})"

    def _get_num_neig(self):
        return 5

    def update(self, m_ref_sim):
        if self.state == AgentState.DEAD:
            return

        if self.agent_type is None or not isinstance(self.agent_type, str):
            return

        num_neig = self._get_num_neig()
        l_agents = []

        if self.agent_type == AgentType.HUMAN:
            l_agents += m_ref_sim.get_all_humans()
        if self.agent_type == AgentType.DOCTOR:
            l_agents += m_ref_sim.get_all_doctors()
        if self.agent_type == AgentType.ZOMBIE:
            l_agents += m_ref_sim.get_all_zombies()

        l_neig_idx = np.random.choice(list(range(len(l_agents))), size=num_neig)
        l_neig = [l_agents[idx] for idx in range(len(l_agents)) if idx in l_neig_idx]
        np.random.shuffle(l_neig)
        self.neighbors = l_neig


# Define subclasses for each agent type
class Human(Agent):
    def __init__(self, energy_range=(90, 100)):
        super().__init__(AgentType.HUMAN, energy_range)

    def update(self, all_agents):
        if self.energy <= 0:
            self.state = AgentState.DEAD

    def bitten(self, zombie):
        if self.state == AgentState.ALIVE:
            self.state = AgentState.INFECTED
            self.energy -= 5


class Zombie(Agent):
    def __init__(self, energy_range=(0, 100)):
        super().__init__(AgentType.ZOMBIE, energy_range)
        self.m_ref_sim = None

    def update(self, m_ref_sim):
        self.m_ref_sim = m_ref_sim

        if self.energy <= 0 and self.state != AgentState.DEAD:
            self.state = AgentState.DEAD
        elif self.state == AgentState.ALIVE:
            neighbors = self._select_neighbors({AgentType.HUMAN, AgentType.DOCTOR})
            for neighbor in neighbors:
                if neighbor.agent_type == AgentType.HUMAN and neighbor.state == AgentState.ALIVE:
                    if random.random() < 0.3:
                        neighbor.state = AgentState.INFECTED
                        neighbor.energy -= 20
                        self.energy += 10

                        if neighbor.energy <= 0:
                            neighbor.state = AgentState.DEAD
                            self.state = AgentState.DEAD
                        break

    def _select_neighbors(self, agent_types):
        all_agents = [agent for agent in self.m_ref_sim.all_agents if agent.state == AgentState.ALIVE]
        num_neig = self._get_num_neig()
        l_neig_idx = np.random.choice(list(range(len(all_agents))), size=num_neig)
        l_neig = [all_agents[idx] for idx in l_neig_idx]
        np.random.shuffle(l_neig)
        selected_neighbors = [neighbor for neighbor in l_neig if neighbor.agent_type in agent_types]
        return selected_neighbors


class Doctor(Agent):
    def __init__(self, energy_range=(0, 100)):
        super().__init__(AgentType.DOCTOR, energy_range)
        self.m_ref_sim = None

    def _get_num_neig(self):
        # Define the number of neighbors for a doctor
        return 5

    def update(self, m_ref_sim):
        self.m_ref_sim = m_ref_sim
        neighbors = self._select_neighbors({AgentType.HUMAN, AgentState.INFECTED})
        for neighbor in neighbors:
            if self.state == AgentState.INFECTED:
                if random.random() < 0.4:
                    self.state = AgentState.ALIVE
                    self.energy += 10
            elif self.state == AgentState.ALIVE:
                infected_neighbors = [neighbor for neighbor in m_ref_sim.all_agents if neighbor.agent_type == AgentType.HUMAN and neighbor.state == AgentState.INFECTED]
                for infected_neighbor in infected_neighbors:
                    if random.random() < 0.9:
                        infected_neighbor.state = AgentState.ALIVE
                        self.energy += 5
            elif self.energy <= 0 and self.state != AgentState.DEAD:
                self.state = AgentState.DEAD

    def _select_neighbors(self, agent_types):
        all_agents = [agent for agent in self.m_ref_sim.all_agents if agent.state == AgentState.ALIVE]
        num_neig = self._get_num_neig()
        l_neig_idx = np.random.choice(list(range(len(all_agents))), size=num_neig)
        l_neig = [all_agents[idx] for idx in l_neig_idx]
        np.random.shuffle(l_neig)
        selected_neighbors = [neighbor for neighbor in l_neig if neighbor.agent_type in agent_types]
        return selected_neighbors


class Broker(Process):
    def __init__(self, agent_queue, db_config):
        super().__init__()
        self.agent_queue = agent_queue
        self.write_queue = Queue()
        self.is_paused = False

        # Store db_config locally
        self.db_config = db_config

        # Cached updates
        self.cached_updates = []

    def run(self):
        def run(self):
            # Establish a new database connection for each process
            conn = psycopg2.connect(**self.db_config)
            cur = conn.cursor()

            try:
                while True:
                    if not self.is_paused:
                        if not self.write_queue.empty():
                            write_request = self.write_queue.get()
                            self.process_write_request(write_request)
                    self.commit_cached_updates()  # Ensure all cached updates are committed before exiting
            except Exception as e:
                print(f"Broker error: {e}")
            finally:
                # Close the cursor and connection when the process is terminating
                cur.close()
                conn.close()

    def process_write_request(self, write_request):
        # Implement logic to process the write request and update the core data structure
        agent_id, agent_status = write_request
        print(f"Writing to core data structure: Agent {agent_id}, Status: {agent_status}")

        self.cached_updates.append(write_request)

        # Check if it's time to commit
        if len(self.cached_updates) >= 10:  # Adjust the threshold as needed
            self.commit_cached_updates()

    def commit_cached_updates(self):
        def commit_cached_updates(self):
            try:
                for update in self.cached_updates:
                    agent_id, agent_status = update
                    # Execute SQL commands to update the database
                    # Example: self.cur.execute("UPDATE agents SET status = %s WHERE id = %s", (agent_status, agent_id))
            except Exception as e:
                print(f"Error committing updates to the database: {e}")
            finally:
                # Commit the changes
                self.conn.commit()

                self.cur.close()

                # Clear the cache
                self.cached_updates = []

    def enqueue_write_request(self, write_request):
        self.write_queue.put(write_request)

    def pause_broker(self):
        self.is_paused = True

    def resume_broker(self):
        self.is_paused = False


# Create a simulation environment
class ZombieGame:

    def __init__(self, num_agents, num_steps, energy_range=(0, 100)):
        self.agents = []
        self.all_agents = []
        self.num_agents = num_agents
        self.num_steps = num_steps
        self.agent_statuses = []
        self.m_ref_sim = None

        self.population_data = {
            AgentType.HUMAN: [],
            AgentType.ZOMBIE: [],
            AgentType.DOCTOR: [],
            AgentType.DEAD: []
        }

        agent_counts = {
            AgentType.HUMAN: 0,
            AgentType.ZOMBIE: 0,
            AgentType.DOCTOR: 0,
            AgentType.DEAD: 0
        }

        for _ in range(num_agents):
            agent_type = random.choice([AgentType.HUMAN, AgentType.ZOMBIE, AgentType.DOCTOR])
            agent = None
            if agent_type == AgentType.HUMAN:
                agent = Human(energy_range)
            elif agent_type == AgentType.ZOMBIE:
                agent = Zombie(energy_range)
            elif agent_type == AgentType.DOCTOR:
                agent = Doctor(energy_range)
            self.agents.append(agent)
            self.all_agents.append(agent)
            agent_counts[agent_type] += 1

        for agent_type in agent_counts:
            self.population_data[agent_type].append(agent_counts[agent_type])

    def _select_neighbors(self, agent_types):
        all_agents = [agent for agent in self.agents if agent.state == AgentState.ALIVE]
        selected_neighbors = [neighbor for neighbor in all_agents if neighbor.agent_type in agent_types]

        return selected_neighbors

    def run_simulation(self):
        for step in range(self.num_steps):
            for agent in self.agents:
                agent.update(self)

            self.agents = [agent for agent in self.agents if agent.state != AgentState.DEAD]

            self.agent_statuses.append([str(agent) for agent in self.agents])

            agent_counts_before = {
                AgentType.HUMAN: 0,
                AgentType.ZOMBIE: 0,
                AgentType.DOCTOR: 0,
                AgentType.DEAD: 0
            }

            for agent in self.all_agents:
                if agent.state == AgentState.DEAD:
                    agent_counts_before[AgentType.DEAD] += 1
                elif agent.state == AgentType.HUMAN:
                    agent_counts_before[AgentType.HUMAN] += 1
                elif agent.state == AgentType.ZOMBIE:
                    agent_counts_before[AgentType.ZOMBIE] += 1
                elif agent.state == AgentType.DOCTOR:
                    agent_counts_before[AgentType.DOCTOR] += 1

            self.agents = [agent for agent in self.agents if agent.state != AgentState.DEAD]

            self.population_data[AgentType.HUMAN].append(agent_counts_before[AgentType.HUMAN])
            self.population_data[AgentType.DOCTOR].append(agent_counts_before[AgentType.DOCTOR])
            self.population_data[AgentType.ZOMBIE].append(agent_counts_before[AgentType.ZOMBIE])
            self.population_data[AgentType.DEAD].append(agent_counts_before[AgentType.DEAD])

            self.agent_statuses.append([str(agent) for agent in self.agents])

        self.save_simulation_data()
        self.plot_simulation_results()

    def save_simulation_data(self):
        # Create an empty list to store step-wise data
        step_data = []

        for step in range(self.num_steps):
            # Each step contains a list of agent statuses
            step_data.append([f"Step_{step}"] + self.agent_statuses[step])

        # Create a DataFrame from the list of step data
        status_df = pd.DataFrame(step_data,
                                 columns=["Step"] + [f"Agent_{i}" for i in range(len(self.agent_statuses[0]))])

        # Save the DataFrame to a CSV file
        status_df.to_csv("agent_statuses.csv", index=False)

    def plot_simulation_results(self):
        plt.figure(figsize=(12, 6))
        for agent_type in AgentType.__dict__.values():
            if isinstance(agent_type, str) and agent_type in self.population_data and self.population_data[agent_type]:
                data_length = min(len(self.population_data[agent_type]), self.num_steps)
                plt.plot(range(data_length), self.population_data[agent_type][:data_length], label=agent_type)
        plt.xlabel("Time Step")
        plt.ylabel("Population Count")
        plt.legend()
        plt.savefig("population_plot.png")
        plt.show()

        plt.ioff()
        plt.show()


if __name__ == "__main__":
    num_brokers = 10
    agent_queue = Queue()

    # define our broker process and start them
    brokers = [Broker(agent_queue, db_config) for _ in range(num_brokers)]
    for broker in brokers:
        broker.start()

    # Create the regular simulation environment
    num_agents_param = 1000
    num_steps_param = 3
    game = ZombieGame(num_agents_param, num_steps_param)
    game.run_simulation()

    # Stop the brokers from continuing
    for broker in brokers:
        broker.terminate()
        broker.join()
